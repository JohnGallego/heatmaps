// <auto-generated />
using heatmaps.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace heatmaps.Migrations
{
    [DbContext(typeof(HeatmapsDbContext))]
    [Migration("20170830210021_ChangeToDataSetRespondentsField")]
    partial class ChangeToDataSetRespondentsField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-preview2-25794")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("heatmaps.Models.Datasets.Concept", b =>
                {
                    b.Property<int>("ConceptId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DatasetId");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("ConceptId");

                    b.HasIndex("DatasetId");

                    b.ToTable("Concepts");
                });

            modelBuilder.Entity("heatmaps.Models.Datasets.DataFilter", b =>
                {
                    b.Property<int>("DataFilterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DatasetId");

                    b.Property<string>("Name");

                    b.Property<string>("Options");

                    b.HasKey("DataFilterId");

                    b.HasIndex("DatasetId");

                    b.ToTable("DataFilters");
                });

            modelBuilder.Entity("heatmaps.Models.Datasets.Dataset", b =>
                {
                    b.Property<int>("DatasetId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectId");

                    b.Property<string>("Respondents");

                    b.HasKey("DatasetId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("heatmaps.Models.HeatMaps.HeatMap", b =>
                {
                    b.Property<int>("HeatMapId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Payload");

                    b.Property<int>("ProjectId");

                    b.HasKey("HeatMapId");

                    b.HasIndex("ProjectId");

                    b.ToTable("HeatMaps");
                });

            modelBuilder.Entity("heatmaps.Models.Projects.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Concepts");

                    b.Property<string>("Creator");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<int>("Filters");

                    b.Property<int>("HeatMaps");

                    b.Property<string>("Name");

                    b.Property<int>("Respondents");

                    b.Property<string>("RussellId");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("heatmaps.Models.Datasets.Concept", b =>
                {
                    b.HasOne("heatmaps.Models.Datasets.Dataset", "Dataset")
                        .WithMany("Concepts")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("heatmaps.Models.Datasets.DataFilter", b =>
                {
                    b.HasOne("heatmaps.Models.Datasets.Dataset", "Dataset")
                        .WithMany("Filters")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("heatmaps.Models.Datasets.Dataset", b =>
                {
                    b.HasOne("heatmaps.Models.Projects.Project", "Project")
                        .WithOne("Dataset")
                        .HasForeignKey("heatmaps.Models.Datasets.Dataset", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("heatmaps.Models.HeatMaps.HeatMap", b =>
                {
                    b.HasOne("heatmaps.Models.Projects.Project", "Project")
                        .WithMany("HeatMapsCollection")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
